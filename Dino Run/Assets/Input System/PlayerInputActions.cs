//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input System/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Dino"",
            ""id"": ""bc1d9a6a-c13e-4821-81b4-821009f977c9"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5bd33292-12e4-4fff-a22e-f2f3fd9e1197"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Duck"",
                    ""type"": ""PassThrough"",
                    ""id"": ""442ea478-849c-4e5f-9bd5-ece5547f3832"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Restart"",
                    ""type"": ""Button"",
                    ""id"": ""7325facf-8fa5-4d5d-b11b-cd2e9ef4d8bc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d9de697f-6d1a-4044-a2e0-044ecc4a0d3f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e0aea00e-df43-48b7-b695-d26ef58c0756"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2cd238df-8699-48d2-b822-7c29028b6c50"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8c553508-f8fd-4c2f-af8f-890ff60453db"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Duck"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""402c5481-24ee-4f85-85e6-21c95fdef88d"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Duck"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ca0b5a15-8844-4f85-a205-3fb7772be8d3"",
                    ""path"": ""<Keyboard>/numpadEnter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Restart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Dino
        m_Dino = asset.FindActionMap("Dino", throwIfNotFound: true);
        m_Dino_Jump = m_Dino.FindAction("Jump", throwIfNotFound: true);
        m_Dino_Duck = m_Dino.FindAction("Duck", throwIfNotFound: true);
        m_Dino_Restart = m_Dino.FindAction("Restart", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Dino
    private readonly InputActionMap m_Dino;
    private IDinoActions m_DinoActionsCallbackInterface;
    private readonly InputAction m_Dino_Jump;
    private readonly InputAction m_Dino_Duck;
    private readonly InputAction m_Dino_Restart;
    public struct DinoActions
    {
        private @PlayerInputActions m_Wrapper;
        public DinoActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_Dino_Jump;
        public InputAction @Duck => m_Wrapper.m_Dino_Duck;
        public InputAction @Restart => m_Wrapper.m_Dino_Restart;
        public InputActionMap Get() { return m_Wrapper.m_Dino; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DinoActions set) { return set.Get(); }
        public void SetCallbacks(IDinoActions instance)
        {
            if (m_Wrapper.m_DinoActionsCallbackInterface != null)
            {
                @Jump.started -= m_Wrapper.m_DinoActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_DinoActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_DinoActionsCallbackInterface.OnJump;
                @Duck.started -= m_Wrapper.m_DinoActionsCallbackInterface.OnDuck;
                @Duck.performed -= m_Wrapper.m_DinoActionsCallbackInterface.OnDuck;
                @Duck.canceled -= m_Wrapper.m_DinoActionsCallbackInterface.OnDuck;
                @Restart.started -= m_Wrapper.m_DinoActionsCallbackInterface.OnRestart;
                @Restart.performed -= m_Wrapper.m_DinoActionsCallbackInterface.OnRestart;
                @Restart.canceled -= m_Wrapper.m_DinoActionsCallbackInterface.OnRestart;
            }
            m_Wrapper.m_DinoActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Duck.started += instance.OnDuck;
                @Duck.performed += instance.OnDuck;
                @Duck.canceled += instance.OnDuck;
                @Restart.started += instance.OnRestart;
                @Restart.performed += instance.OnRestart;
                @Restart.canceled += instance.OnRestart;
            }
        }
    }
    public DinoActions @Dino => new DinoActions(this);
    public interface IDinoActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnDuck(InputAction.CallbackContext context);
        void OnRestart(InputAction.CallbackContext context);
    }
}
